{"version":3,"sources":["logo.svg","Components/AddScreenButton.js","Components/ScreenItem.js","Components/ScreenList.js","Components/Sidebar.js","Components/AddScreenForm.js","Components/Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AddScreenButton","_this","this","react_default","a","createElement","className","onClick","e","props","handleClick","Component","ScreenItem","screen","ScreenList","screens","map","Components_ScreenItem","key","Sidebar","src_Components_ScreenList","Components_AddScreenButton","setContentState","AddScreenForm","values","console","log","data","name","seatInfo","rows","forEach","v","id","numberOfSeats","seatNum","aisleSeats","split","parseInt","trim","axios","post","then","response","status","updated","addScreen","catch","error","_this2","es","onSubmit","submittedValues","handleSubmit","formApi","addValue","type","submitForm","htmlFor","field","required","row","i","concat","options","charCodeAt","j","push","value","String","fromCharCode","label","genCharArray","validate","some","r","min","test","removeValue","errors","Content","content","contentState","src_Components_AddScreenForm","href","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","bind","assertThisInitialized","get","res","setState","toConsumableArray","src_Components_Sidebar","src_Components_Content","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b67f2e2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './Sidebar.css';\r\n\r\nclass AddScreenButton extends Component {\r\n  render() {\r\n    return (\r\n      <button className=\"add-screen-button\" onClick={e => this.props.handleClick(\"addScreen\")}>\r\n        Add New Screen\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddScreenButton;","import React, { Component } from 'react';\r\nimport './ScreenList.css';\r\n\r\nclass ScreenItem extends Component {\r\n    \r\n  render() {\r\n    let {screen} = this.props;\r\n    return (\r\n      <li className=\"screen-item\">\r\n        {screen}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScreenItem;","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nimport ScreenItem from './ScreenItem';\r\n\r\n\r\nclass ScreenList extends Component {\r\n  render() {\r\n\r\n    let { screens } = this.props;\r\n\r\n    return (\r\n      <ul className=\"screen-list\">\r\n        {\r\n            screens.map(screen => <ScreenItem key={screen} screen={screen}></ScreenItem>)\r\n        } \r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScreenList;","import React, { Component } from 'react';\r\nimport './Sidebar.css';\r\n\r\nimport AddScreenButton from './AddScreenButton';\r\nimport ScreenList from './ScreenList';\r\n\r\nclass Sidebar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App-Sidebar\">\r\n        <h1>Available Screens</h1>\r\n        <ScreenList screens={this.props.screens}></ScreenList>\r\n\r\n        <AddScreenButton handleClick={this.props.setContentState}></AddScreenButton>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Form, Text, Select, NestedField } from 'react-form';\r\nimport './AddScreenForm.css';\r\n\r\n\r\nfunction genCharArray() {\r\n    var a = [], i = \"A\".charCodeAt(0), j = \"Z\".charCodeAt(0);\r\n    for (; i <= j; ++i) {\r\n      a.push({\r\n          value: String.fromCharCode(i),\r\n          label: String.fromCharCode(i)\r\n        });\r\n    }\r\n    return a;\r\n  }\r\n\r\nclass AddScreenForm extends Component {\r\n\r\n\r\n  handleSubmit(values){\r\n      console.log(values);\r\n      let data = {\r\n          name: null,\r\n          seatInfo: {}\r\n      }\r\n\r\n      data.name = values.name;\r\n      values.rows.forEach(v => {\r\n        data.seatInfo[v.id] = {\r\n            numberOfSeats: v.seatNum,\r\n            aisleSeats: v.aisleSeats ? v.aisleSeats.split(',').map(e => parseInt(e.trim())) : []\r\n        }\r\n      });\r\n\r\n\r\n      axios.post('/screens', data)\r\n      .then((response) => {\r\n          if(response.status == 200){\r\n            if(!response.data.updated) this.props.addScreen(response.data.screen.name);\r\n          }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n  }\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"add-screen-form-container\">\r\n            <h1>Add Screen Form</h1>\r\n            <Form\r\n            onSubmit={submittedValues => this.handleSubmit(submittedValues)}>\r\n            { formApi => (\r\n              <div>\r\n                <button\r\n                  onClick={() => formApi.addValue('rows', {})}\r\n                  type=\"button\"\r\n                  className=\"mb-4 mr-4 btn btn-success\">Add Row</button>\r\n                <form onSubmit={formApi.submitForm} id=\"dynamic-form\">\r\n                  <label htmlFor=\"dynamic-first\">Screen Name</label>\r\n                  <Text field=\"name\" id=\"dynamic-first\" required/>\r\n                  { formApi.values.rows && formApi.values.rows.map( ( row, i ) => (\r\n                    <div key={`sibling${i}`}>\r\n                        <label htmlFor={`row-id-${i}`}>Row: </label>\r\n                        <Select field={['rows', i, \"id\"]} id={`row-id-${i}`} options={genCharArray()} \r\n                        validate={value => ({\r\n                            error: !value || formApi.values.rows.some((r, j )=> (j !== i && r.id === value))? \"This row is already entered\" : null\r\n                        })}/>\r\n                        \r\n                        <label htmlFor={`row-seatNum-${i}`}>Number Of Seats: </label>\r\n                        <Text field={['rows', i, \"seatNum\"]} id={`row-seatNum-${i}`} type=\"number\" min=\"1\" required></Text>\r\n                        \r\n                        <label htmlFor={`row-aisleSeats-${i}`}>Aisle Seats(Separated by comma): </label>\r\n                        <Text field={['rows', i, \"aisleSeats\"]} id={`row-aisleSeats-${i}`}\r\n                            validate={value => ({\r\n                                error: value && !/(^$)|(^(\\d+)(\\s*,\\s*\\d+)*$)/.test(value)? \"Must be a Comma separated list of positive numbers\" : null\r\n                            })}\r\n                        ></Text>\r\n                        <button\r\n                            onClick={() => formApi.removeValue('rows', i)}\r\n                            type=\"button\"\r\n                            className=\"mb-4 btn btn-danger\">Remove</button>\r\n                        <p>{ formApi.errors && formApi.errors.rows[i] && formApi.errors.rows[i].id }</p>\r\n                        <p>{ formApi.errors && formApi.errors.rows[i] && formApi.errors.rows[i].aisleSeats }</p>\r\n                    </div>\r\n                  ))}\r\n                  <button type=\"submit\" className=\"mb-4 btn btn-primary\">Submit</button>\r\n                </form>\r\n              </div>\r\n            )}\r\n          </Form>\r\n        </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default AddScreenForm;","import React, { Component } from 'react';\r\nimport './Content.css';\r\n\r\nimport AddScreenForm from './AddScreenForm';\r\n\r\nclass Content extends Component {\r\n  render() {\r\n\r\n    let {contentState} = this.props;\r\n\r\n    let content;\r\n    switch(contentState){\r\n        case 'addScreen':\r\n            content = <AddScreenForm addScreen={this.addScreen}></AddScreenForm>;\r\n            break;\r\n        default:\r\n            content = null;\r\n    }\r\n\r\n    return (\r\n      <div className=\"App-Content\">\r\n        <a className=\"logout-btn\" href=\"/auth/logout\">LOGOUT</a>\r\n        {\r\n            content\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport axios from 'axios';\n\nimport Sidebar from './Components/Sidebar';\nimport Content from './Components/Content'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      screens: [],\n      contentState: null\n    };\n\n    this.setContentState = this.setContentState.bind(this);\n    this.addScreen = this.addScreen.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get(\"/screens\")\n      .then(res => {\n        if(res.status == 200){\n          this.setState({\n            isLoaded: true,\n            screens: res.data.screens\n          });\n        }\n      }).catch((error) => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n  }\n\n  setContentState(state) {\n    this.setState({\n      contentState: state\n    });\n  }\n\n  addScreen(screen) {\n    this.setState({\n      screens: [...this.state.screens, screen]\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Sidebar screens={this.state.screens}\n          setContentState={this.setContentState}\n        ></Sidebar>\n        <Content addScreen={this.addScreen} contentState={this.state.contentState}></Content>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}